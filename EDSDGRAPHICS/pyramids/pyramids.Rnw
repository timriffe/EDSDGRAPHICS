\section{Population pyramids}
By now you will probably have seen how to make populatin pyramids in Excel, but it's well worth your time to see a couple R-tastic ways of making them as well because 1) it's faster! 2) they are easier to standardize and make comparable and 3) it's way more reproducible. You might disagree with the first point, but actually if you already have your data in the shape required by Excel, then you have a few R functions at your disposal to make the pyramid in a single step. I'll present 2 functions, \texttt{pyramid} from the \texttt{pyramid} package by Minato Nakazawa and my own \texttt{Pyramid} function in the package \texttt{Pyramid}. For your information, there is also a pyramid plotting functions in the \texttt{plotrix} package, and there maybe others on CRAN as well. I show them both because they differ essentially in their plotting strategy. \texttt{Pyramid()} wraps directly to \texttt{barplot()} from base graphics, whereas \texttt{pyramid()} calls the even more primitive \texttt{polygon()} function. The plot aesthetics are also a bit different between the two functions.

For both functions, we'll use Spanish data from the year 2000 \footnote{These are included in \txttt{Pyramid} package as examples data} from the HMD.

First some words on population pyramids in general: There are a set of conventions that one must adhere to, just as for Lexis surfaces, in order that population pyramids be correctly interpreted and comparable between populations. First and always: use equal axis extremes for males and females so that the pyramid is centered in your figure. If you are doing multiple pyramids, think carefully about the kind of comparisons you'll want to do. This will bear directly on your decision for x-axis limits. For two populations of similar size, it is OK to use absolute population counts for the axes as long as the axes are the same for both figures and both pyramids are still intelligible. In this way you can get an idea of cohort sizes and population structure at the same time. This circumstance will rarely pertain in reality. If two populations are of different orders of size (or even if one is just 20\% bigger than the other), and you are even remotely interested in comparing population structure then you should rescale the populations before plotting. What number to rescale to is a matter of choice, but 100 is a decent choice, such that the x axis ticks can be clean percentages. You'll typically have 2 vectors of numbers, one for male counts by age and another for female counts by age: Rescaling must be done in terms of the sum of \textit{both} of these vectors together, not separately. There will be an example of theis pre-plotting step for the \texttt{pyramid()} function (\texttt{Pyramid()} does it automagically). Take home message: pyramids are for looking at structure, and are best looked at and compared on the same scale. Finally (and never forget it!), males on the left, females on the right\footnote{I once saw a famous French demographer do just the opposite, and this person failed to point out the fact. Of course you always need to adhere to local standards, but do be aware that most demographer around the world put males on the left.}. This last is in my opinion just as important as always plotting cohort lines at 45 degree angles. Just do it.

<<>>=
#install.packages("data/Pyramid_1.11.zip",repos=NULL)
library(Pyramid)
data(ESP2000)
#load("/home/triffe/git/Pyramid/Pyramid/data/ESP2000.rda")
# give age labels
rownames(ESP2000) <- 0:110
head(ESP2000)
@

\subsection{pyramid()}
The \texttt{pyramid()} function takes a \texttt{data.frame} as it's primary argument\footnote{the same package also offers \texttt{pyramids()}, which takes vector arguments.}. This needs to have at least 2 columns, the first for the left side of the pyramid (males in our convention) and the second for the right side (females). Ages are either taken from the rownames or from an optional third column in the \texttt{data.frame}.

<<>>=
# install from CRAN if needed:
#install.packages("pyramid")
library(pyramid)
# convert to data.frame
ESP2000df <- as.data.frame(ESP2000)
@

<<pyramidcall1>>=
pyramid(ESP2000df,Llab="Males",Rlab="Females",Clab="",Laxis=seq(0,350000,len=5),
		AxisFM="d", AxisBM=",", Csize=0.5, Cstep=10,
		main="Population pyramid of Spain\n (Data: HMD)")
@

Some prefer the age axis to go up the middle, as is the standard with \texttt{pyramid()}. In this case the axis labels are a bit sloppy, and the function unfortunately offers no control over this at this time. I think we can get around that problem by simply rescaling the population prior to plotting (next step)

\begin{figure}[H]
\centering
<<echo=FALSE,results=hide,fig=TRUE>>=
<<pyramidcall1>>
@
\caption{\texttt{pyramid()}, with unscaled population.}
\end{figure}

Rescaling in R is super easy, just divide the thing by its own sum and multiply by whatever you want the new sum to be. In this case I multiply by 100 so that the age bars canbe thought of as percents (or fractions of percents).

<<>>=
# rescale to 100
ESP2000df <- 100*(ESP2000df/sum(ESP2000df))
@

We have to change the lower axis limits.

<<pyramidcall2>>=
pyramid(ESP2000df,Llab="Males",Rlab="Females",Clab="",Laxis=c(0,.2,.4,.6,.8,1), Cstep=10,
		main="Population pyramid of Spain\n (Data: HMD)")
@

Replotting with essentially the same function call:

\begin{figure}[H]
\centering
<<echo=FALSE,results=hide,fig=TRUE>>=
<<pyramidcall2>>
@
\caption{\texttt{pyramid()}, with scaled population.}
\end{figure}

I find the function rather inflexible in terms of labelling: it'd be nice to be able to add \% signs to the axis labels, and for the default axes to use clean numbers, but otherwise it does the job right.

\subsection{Pyramid}
